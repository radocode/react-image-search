{"version":3,"sources":["api/unsplash.js","components/SearchBar.js","components/ImageCard.js","components/ImageList.js","components/App.js","index.js"],"names":["axios","create","baseURL","headers","Authorization","SearchBar","state","term","onFormSubmit","event","preventDefault","props","onSubmit","className","this","htmlFor","type","value","onChange","e","setState","target","React","Component","ImageCard","setSpans","height","imageRef","current","clientHeight","spans","Math","ceil","createRef","addEventListener","image","description","urls","style","gridRowEnd","ref","alt","src","regular","ImageList","images","map","key","id","App","onSearchSubmit","a","unsplash","get","params","query","response","data","results","marginTop","ReactDOM","render","document","querySelector"],"mappings":"gSAEeA,E,OAAAA,EAAMC,OAAO,CACxBC,QAAS,2BACTC,QAAS,CACLC,cAAe,2DCuBRC,E,4MAxBXC,MAAQ,CAACC,KAAM,I,EAGfC,aAAe,SAACC,GACZA,EAAMC,iBAEN,EAAKC,MAAMC,SAAS,EAAKN,MAAMC,O,uDAIzB,IAAD,OACL,OACI,yBAAKM,UAAU,cACX,0BAAMD,SAAUE,KAAKN,aAAcK,UAAU,WACzC,yBAAKA,UAAU,SACf,2BAAOE,QAAQ,IAAf,gBACA,2BAAOC,KAAK,OAAOC,MAAOH,KAAKR,MAAMC,KAAMW,SAAU,SAACC,GAAD,OAAO,EAAKC,SAAS,CAACb,KAAMY,EAAEE,OAAOJ,kB,GAlBtFK,IAAMC,WCgCfC,G,wDA/Bb,WAAYb,GAAQ,IAAD,8BACjB,cAAMA,IAaRc,SAAW,WACT,IAAMC,EAAS,EAAKC,SAASC,QAAQC,aAC/BC,EAAQC,KAAKC,KAAKN,EAAS,GAAK,GACtC,EAAKN,SAAS,CAAEU,WAdhB,EAAKxB,MAAQ,CAAEwB,MAAO,GAEtB,EAAKH,SAAWL,IAAMW,YALL,E,gEAWjBnB,KAAKa,SAASC,QAAQM,iBAAiB,OAAQpB,KAAKW,Y,+BAS5C,IAAD,EACuBX,KAAKH,MAAMwB,MAAjCC,EADD,EACCA,YAAaC,EADd,EACcA,KAErB,OACE,yBAAKC,MAAO,CAAEC,WAAW,QAAD,OAAUzB,KAAKR,MAAMwB,SAC3C,yBAAKU,IAAK1B,KAAKa,SAAUc,IAAKL,EAAaM,IAAKL,EAAKM,e,GA1BrCrB,IAAMC,YCafqB,EAXG,SAACjC,GAIjB,IAAMkC,EAASlC,EAAMkC,OAAOC,KAAI,SAACX,GAC/B,OAAO,kBAAC,EAAD,CAAWY,IAAKZ,EAAMa,GAAIb,MAAOA,OAG1C,OAAO,yBAAKtB,UAAU,cAAcgC,ICqBvBI,E,4MA1BX3C,MAAQ,CAAEuC,OAAQ,I,EAElBK,e,uCAAiB,WAAO3C,GAAP,eAAA4C,EAAA,sEACUC,EAASC,IAAI,iBAAkB,CAClDC,OAAQ,CACJC,MAAOhD,KAHF,OACPiD,EADO,OAWb,EAAKpC,SAAS,CAAEyB,OAAQW,EAASC,KAAKC,UAXzB,2C,6GAeb,OACI,yBAAK7C,UAAU,eAAeyB,MAAO,CAAEqB,UAAW,SAC9C,kBAAC,EAAD,CAAW/C,SAAUE,KAAKoC,iBAC1B,kBAAC,EAAD,CAAWL,OAAQ/B,KAAKR,MAAMuC,c,GAtB5BvB,IAAMC,WCDxBqC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,Y","file":"static/js/main.55be4ff9.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default axios.create({\n    baseURL: 'https://api.unsplash.com',\n    headers: {\n        Authorization: 'Client-ID 3lqgxXdhEX0acWWBksPPPSsYQlEG7K_B-m4wBIMWl08'\n    }\n});\n","import React from 'react';\n\nclass SearchBar extends React.Component {\n\n    state = {term: ''};\n\n    // tratar de siempre hacer los eventos con arrow function, asi babel nos ayuda a evitar problemas undefined\n    onFormSubmit = (event) => {\n        event.preventDefault();\n\n        this.props.onSubmit(this.state.term);\n    }\n\n    // ALT: se puede hacer con arrow function en onSubmit en el form: event => this.onFormSubmit(event)\n    render() {\n        return (\n            <div className=\"ui segment\">\n                <form onSubmit={this.onFormSubmit} className=\"ui form\">\n                    <div className=\"field\">\n                    <label htmlFor=\"\">Image Search</label>\n                    <input type=\"text\" value={this.state.term} onChange={(e) => this.setState({term: e.target.value})}/>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default SearchBar;\n","import React from \"react\";\n\nclass ImageCard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { spans: 0 };\n\n    this.imageRef = React.createRef();\n  }\n\n  componentDidMount() {\n    // no es como angular que puedes tener un OutputListener, aca se declara un listener JS vanilla para\n    // esperar a que se renderice todo y obtener el clientHeight\n    this.imageRef.current.addEventListener(\"load\", this.setSpans);\n  }\n\n  setSpans = () => {\n    const height = this.imageRef.current.clientHeight;\n    const spans = Math.ceil(height / 10 + 1);\n    this.setState({ spans });\n  };\n\n  render() {\n    const { description, urls } = this.props.image;\n\n    return (\n      <div style={{ gridRowEnd: `span ${this.state.spans}`}}>\n        <img ref={this.imageRef} alt={description} src={urls.regular} />\n      </div>\n    );\n  }\n}\n\nexport default ImageCard;\n","import \"./ImageList.css\";\nimport React from \"react\";\nimport ImageCard from \"./ImageCard\";\n\nconst ImageList = (props) => {\n  // ojo que se puede de-estructurar el objeto de images del map a esta forma,\n  // y simplificar el acceso a los atributos:\n  // en vez de (images) seria ({description, id, urls})\n  const images = props.images.map((image) => {\n    return <ImageCard key={image.id} image={image} />;\n  });\n\n  return <div className=\"image-list\">{images}</div>;\n};\n\nexport default ImageList;\n","import React from 'react';\nimport unsplash from '../api/unsplash';\nimport SearchBar from './SearchBar';\nimport ImageList from './ImageList'\n\nclass App extends React.Component {\n\n    state = { images: [] };\n\n    onSearchSubmit = async (term) => {\n        const response = await unsplash.get('/search/photos', {\n            params: {\n                query: term\n            }\n        })\n        // alternativamente se pueden usar promesas:\n        // .then((response) => {\n        //     console.log(response.data.results);\n        // });\n\n        this.setState({ images: response.data.results });\n    }\n\n    render() {\n        return (\n            <div className=\"ui container\" style={{ marginTop: '10px' }}>\n                <SearchBar onSubmit={this.onSearchSubmit} />\n                <ImageList images={this.state.images} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.querySelector('#root'));"],"sourceRoot":""}